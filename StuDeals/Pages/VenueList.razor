@page "/venuelist"

<PageTitle>Venues</PageTitle>

@using StuDeals.Classes

<h1>Venues</h1>

<p>A list of all the venues in the database.</p>

<p>
    Search For a specific Tag:
</p>

<input @bind="_SearchBar" />
<button class="btn btn-primary" @onclick="SearchForTag">Search</button>

@if (venues == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Icon</th>
                <th>Name</th>
                <th>Tags</th>
                <th>Description</th>
                <th>Location</th>
                @if (Account.CurrentAccount != null && Account.CurrentAccount.Type == Account.AccountType.Mod)
                {
                    <th></th>
                }

            </tr>
        </thead>
        <tbody>
            @foreach (var venue in venues)
            {

                <tr>
                    <td><img src="@($"Images\\{venue.ImageLink}")" style="height:50px; border-radius: 8px;" /></td>
                    <NavLink class="nav-link" href="@($"venue/{venue.ID}")">
                        <td>@venue.Name</td>
                    </NavLink>
                    <td>
                        @for (int index = 0; index < venue.Tags.Count; ++index)
                        {
                            <i>@venue.Tags[index]</i>
                            @if (index + 1 != venue.Tags.Count)
                            {
                                <i>, </i>
                            }
                        }
                    </td>
                    <td>@venue.Description</td>
                    <td>@venue.Location</td>
                    @if (Account.CurrentAccount != null && Account.CurrentAccount.Type == Account.AccountType.Mod)
                    {
                        <td><button class="btn btn-primary" @onclick="() => DeleteVenue(venue)">Delete</button></td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Venue>? venues;
    private string _SearchBar = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        Venue[] venueList = await Task.Factory.StartNew(() => DataLayer.Instance.GetVenues());
        venues = new List<Venue>(venueList);
    }

    private void DeleteVenue(Venue pVenue)
    {
        DataLayer.Instance.DeleteVenue(pVenue.ID);
        if (venues != null) venues.Remove(pVenue);
    }

    private void SearchForTag()
    {
        if (_SearchBar == String.Empty)
        {
            venues = new List<Venue>(DataLayer.Instance.GetVenues());
        }
        else
        {
            venues = new List<Venue>(DataLayer.Instance.GetVenuesWithTags(_SearchBar));
        }
    }
}